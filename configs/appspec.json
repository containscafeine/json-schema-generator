{
  "$schema": "http://json-schema.org/schema#", 
  "required": [
    "name", 
    "containers"
  ], 
  "type": "object", 
  "description": "AppSpec is a description of an app", 
  "properties": {
    "configMaps": {
      "items": {
        "required": [
          "data"
        ], 
        "description": "Define ConfigMap to be created", 
        "properties": {
          "data": {
            "additionalProperties": {
              "type": "string"
            }, 
            "type": "object", 
            "description": "Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'"
          }, 
          "name": {
            "type": "string", 
            "description": "Name of the configMap"
          }
        }
      }, 
      "type": "array", 
      "description": "List of configMaps"
    }, 
    "ingresses": {
      "items": {
        "description": "Create ingress object", 
        "properties": {
          "name": {
            "type": "string", 
            "description": "Name of the ingress"
          }
        }
      }, 
      "type": "array", 
      "description": "List of Kubernetes Ingress"
    }, 
    "name": {
      "type": "string", 
      "description": "Name of the micro-service"
    }, 
    "labels": {
      "additionalProperties": {
        "type": "string"
      }, 
      "type": "object", 
      "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
    }, 
    "persistentVolumes": {
      "items": {
        "required": [
          "size"
        ], 
        "description": "Define Persistent Volume to use in the app", 
        "properties": {
          "name": {
            "type": "string", 
            "description": "Name of the persistent Volume Claim"
          }, 
          "size": {
            "type": "string", 
            "description": "Size of persistent volume"
          }
        }
      }, 
      "type": "array", 
      "description": "List of persistentVolumes that should be mounted on the pod."
    }, 
    "services": {
      "items": {
        "required": [
          "ports"
        ], 
        "description": "Define Kubernetes service", 
        "properties": {
          "name": {
            "type": "string", 
            "description": "Name of the service"
          }, 
          "ports": {
            "items": {
              "description": "Define service port", 
              "properties": {
                "endpoint": {
                  "type": "string", 
                  "description": "Host to create ingress automatically. Endpoint allows specifying an ingress resource in the format '<Host>/<Path>'"
                }
              }
            }, 
            "type": "array", 
            "description": "The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
          }
        }
      }, 
      "type": "array", 
      "description": "List of Kubernetes Services"
    }, 
    "containers": {
      "items": {
        "description": "A single application container that you want to run within a pod.", 
        "properties": {
          "health": {
            "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.", 
            "properties": {
              "httpGet": {
                "required": [
                  "port"
                ], 
                "description": "HTTPGetAction describes an action based on HTTP Get requests.", 
                "properties": {
                  "path": {
                    "type": "string", 
                    "description": "Path to access on the HTTP server."
                  }, 
                  "host": {
                    "type": "string", 
                    "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
                  }, 
                  "scheme": {
                    "type": "string", 
                    "description": "Scheme to use for connecting to the host. Defaults to HTTP."
                  }, 
                  "httpHeaders": {
                    "items": {
                      "required": [
                        "name", 
                        "value"
                      ], 
                      "description": "HTTPHeader describes a custom header to be used in HTTP probes", 
                      "properties": {
                        "name": {
                          "type": "string", 
                          "description": "The header field name"
                        }, 
                        "value": {
                          "type": "string", 
                          "description": "The header field value"
                        }
                      }
                    }, 
                    "type": "array", 
                    "description": "Custom headers to set in the request. HTTP allows repeated headers."
                  }, 
                  "port": {
                    "type": "string", 
                    "format": "int-or-string"
                  }
                }
              }, 
              "timeoutSeconds": {
                "type": "integer", 
                "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes", 
                "format": "int32"
              }, 
              "exec": {
                "description": "ExecAction describes a \"run in container\" action.", 
                "properties": {
                  "command": {
                    "items": {
                      "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
                  }
                }
              }, 
              "initialDelaySeconds": {
                "type": "integer", 
                "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes", 
                "format": "int32"
              }, 
              "tcpSocket": {
                "required": [
                  "port"
                ], 
                "description": "TCPSocketAction describes an action based on opening a socket", 
                "properties": {
                  "host": {
                    "type": "string", 
                    "description": "Optional: Host name to connect to, defaults to the pod IP."
                  }, 
                  "port": {
                    "type": "string", 
                    "format": "int-or-string"
                  }
                }
              }, 
              "periodSeconds": {
                "type": "integer", 
                "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.", 
                "format": "int32"
              }, 
              "successThreshold": {
                "type": "integer", 
                "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.", 
                "format": "int32"
              }, 
              "failureThreshold": {
                "type": "integer", 
                "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.", 
                "format": "int32"
              }
            }
          }, 
          "envFrom": {
            "items": {
              "required": [
                "configMapRef"
              ], 
              "description": "EnvFromSource represents the source of a set of ConfigMaps", 
              "properties": {
                "configMapRef": {
                  "required": [
                    "name"
                  ], 
                  "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with. The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.", 
                  "properties": {
                    "name": {
                      "type": "string", 
                      "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
                    }
                  }
                }
              }
            }, 
            "type": "array", 
            "description": "EnvFrom defines the collection of EnvFromSource to inject into containers."
          }
        }
      }, 
      "type": "array", 
      "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated."
    }
  }
}